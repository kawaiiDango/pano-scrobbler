name: Build binaries
on:
  workflow_dispatch:
    inputs:
      upload-release:
        type: boolean
        description: 'Upload to GitHub Releases?'
        required: false
        default: false
jobs:
  build:
    name: Build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, ubuntu-24.04-arm]
        include:
        - os: windows-latest
          resources-dir: windows-x64
        - os: ubuntu-latest
          resources-dir: linux-x64
        - os: ubuntu-24.04-arm
          resources-dir: linux-arm64
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Fix permissions
        if: matrix.resources-dir != 'windows-x64'
        shell: bash
        run: |
          chmod +x ./gradlew

      - name: Set up common secrets
        shell: bash
        run: |
          echo "${{ secrets.TOKENS_KT }}" | base64 -d - > composeApp/src/commonMain/kotlin/com/arn/scrobble/Tokens.kt
          mkdir -p composeApp/src/desktopMain/composeResources/files
          echo "${{ secrets.EMBEDDED_SERVER_JKS }}" | base64 -d - > composeApp/src/desktopMain/composeResources/files/pano-embedded-server-ks.jks

      - if: matrix.resources-dir == 'linux-x64'
        name: Set up Android secrets
        shell: bash
        run: |
          echo "${{ secrets.STRINGS_NP_TAR_GZ }}" | base64 -d - > ~/strings-np.tar.gz
          tar -xzf ~/strings-np.tar.gz -C composeApp/src/androidMain/res/
          curl "${{ secrets.URL_BASELINE_PROF_TXT }}" --create-dirs -o composeApp/src/androidReleaseGithub/generated/baselineProfiles/baseline-prof.txt
          cp composeApp/src/androidReleaseGithub/generated/baselineProfiles/baseline-prof.txt composeApp/src/androidReleaseGithub/generated/baselineProfiles/startup-prof.txt
          tar -xzf ~/strings-np.tar.gz -C composeApp/src/androidMain/res/
          mkdir -p composeApp/src/androidMain/composeResources/files
          echo "${{ secrets.EMBEDDED_SERVER_BKS }}" | base64 -d - > composeApp/src/androidMain/composeResources/files/pano-embedded-server-ks.bks
          echo "${{ secrets.ANDROID_KEYSTORE_JKS }}" | base64 -d - > composeApp/android-keystore.jks
          echo "${{ secrets.LOCAL_PROPERTIES }}" > local.properties

      - if: matrix.resources-dir == 'windows-x64'
        name: Set up NSIS
        shell: bash
        run: |
          choco install -y --no-progress nsis

      - if: matrix.resources-dir == 'linux-x64'
        name: Build APK
        shell: bash
        run: |
          export JAVA_HOME=$JAVA_HOME_21_X64
          ./gradlew composeApp:exportLibraryDefinitions -PaboutLibraries.exportVariant=releaseGithub
          ./gradlew composeApp:assembleReleaseGithub
          ./gradlew --stop

      # - uses: graalvm/setup-graalvm@v1
      #   with:
      #     java-version: '21'
      #     distribution: 'liberica'
      #     github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Liberica NIK (GraalVM)
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
          LIBERICA_REPO: bell-sw/LibericaNIK
          LIBERICA_TAG: '25.0.0+1-25+37'
          WIN_X64_FILE: 'bellsoft-liberica-vm-openjdk25+37-25.0.0+1-windows-amd64.zip'
          LINUX_X64_FILE: 'bellsoft-liberica-vm-openjdk25+37-25.0.0+1-linux-amd64.tar.gz'
          LINUX_ARM64_FILE: 'bellsoft-liberica-vm-openjdk25+37-25.0.0+1-linux-aarch64.tar.gz'
        run: |
          set -euxo pipefail
          mkdir -p ~/nik/downloads ~/nik/extracted

          case "${{ matrix.resources-dir }}" in
            windows-x64)
              FILENAME="${WIN_X64_FILE}"
              ;;
            linux-x64)
              FILENAME="${LINUX_X64_FILE}"
              ;;
            linux-arm64)
              FILENAME="${LINUX_ARM64_FILE}"
              ;;
            *)
              echo "Unknown matrix.resources-dir: ${{ matrix.resources-dir }}" >&2
              exit 1
              ;;
          esac

          echo "Downloading ${FILENAME} from ${LIBERICA_REPO} tag ${LIBERICA_TAG}"
          gh release download "${LIBERICA_TAG}" -R "${LIBERICA_REPO}" -p "${FILENAME}" -D ~/nik/downloads

          ARCHIVE=~/nik/downloads/${FILENAME}
          DEST=~/nik/extracted

          case "${{ matrix.resources-dir }}" in
            windows-x64)
              7z x "$ARCHIVE" -o"$DEST" -y
              ;;
            linux-x64)
              tar -xf "${ARCHIVE}" -C "${DEST}"
              ;;
            linux-arm64)
              tar -xf "${ARCHIVE}" -C "${DEST}"
              ;;
            *)
              echo "Unknown matrix.resources-dir: ${{ matrix.resources-dir }}" >&2
              exit 1
              ;;
          esac

          EXTRACT_DIR="$(find "${DEST}" -mindepth 1 -maxdepth 1 -type d | head -n 1)"
          if [ -z "${EXTRACT_DIR}" ]; then
            echo "Failed to locate extracted directory" >&2
            ls -la "${DEST}" || true
            exit 1
          fi

          echo "JAVA_HOME=${EXTRACT_DIR}" >> "$GITHUB_ENV"
          echo "GRAALVM_HOME=${EXTRACT_DIR}" >> "$GITHUB_ENV"

      - name: Download native libraries
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          RUN_ID=$(gh run list \
            -R "kawaiiDango/pano-native-components" \
            --workflow "build.yml" \
            --status success \
            -L 1 \
            --json databaseId \
            -q '.[0].databaseId')

          if [ -z "$RUN_ID" ]; then
            echo "No successful runs found" >&2
            exit 1
          fi

          # Download artifacts from that run (filter by name if provided)
          gh run download "$RUN_ID" -R "kawaiiDango/pano-native-components" -n "libs-${{ matrix.resources-dir }}" -D composeApp/resources/${{ matrix.resources-dir }}
      
      - name: Build desktop jar and native image
        shell: bash
        run: |
          ./gradlew composeApp:exportLibraryDefinitions -PaboutLibraries.exportVariant=desktop
          ./gradlew composeApp:packageUberJarForCurrentOS
      
      - name: Upload desktop binary
        uses: actions/upload-artifact@v4
        with:
          name: pano-scrobbler-${{ matrix.resources-dir }}
          path: composeApp/dist/pano-scrobbler-${{ matrix.resources-dir }}*

      - if: matrix.resources-dir == 'linux-x64'
        name: Upload Android binary
        uses: actions/upload-artifact@v4
        with:
          name: pano-scrobbler-android-universal
          path: composeApp/dist/pano-scrobbler-android-universal*
  
  upload-release:
    needs: [build]
    runs-on: ubuntu-latest
    if: ${{ github.event.inputs.upload-release == true }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Read version
        id: get_version
        run: |
          verCode=$(cat "composeApp/version.txt")
          verName="$((verCode / 100)).$((verCode % 100))"
          echo "verCode=$verCode" >> $GITHUB_OUTPUT
          echo "verName=$verName" >> $GITHUB_OUTPUT

      - name: Download all build artifacts
        uses: actions/download-artifact@v5
        with:
          merge-multiple: true
          path: composeApp/dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.get_version.outputs.verCode }}
          name: ${{ steps.get_version.outputs.verName }}
          body_path: composeApp/src/androidMain/play/release-notes/en-US/default.txt
          files: composeApp/dist/**